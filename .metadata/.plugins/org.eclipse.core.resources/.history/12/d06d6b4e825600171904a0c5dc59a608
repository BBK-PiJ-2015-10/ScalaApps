import akka.actor._
import CoffeeProtocol._
import CoffeeProtocol.Uninitialised

class CoffeeShop extends FSM[State,Data] {
  
  startWith(Closed,Uninitialised)
  
  when(Closed) {
    
    case Event(Open, _) =>
     
      context.actorOf(Props[Barrister], "john")
      context.actorOf(Props[Barrister], "maria")
      context.actorOf(Props[Barrister], "james")
      context.actorOf(Props[Barrister], "the-one-with-the-hipster-beard")
      goto (Opened) using OrderQueue(Map.empty)

   
    case Event(Barristas, _) =>
      
      println(context.children)
      sender ! context.chilren
      stay
      
  }
  
  when (Opened) {
    
    case Even(CustomerOrder(name)
    
    
  }
  
  
}