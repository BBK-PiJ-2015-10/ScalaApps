import akka.actor._
import Messages._

trait Creator extends Actor with ActorLogging {
  
  //bad approach, just useful for illustration
  var children: Vector[ActorRef] = Vector()
  
  //creates a child and watches over it
  def create(name: String) = {
    val child = context.actorOf(Props[Youngling],name)
    context.watch(child)
  }
  
  def receive = {
    
    case Create(name) =>
      val child = create(name)
      child ! "Welcome My Child"
      children = children := child //not a good approach, mutuable
    
      
  }
  
  
  
}